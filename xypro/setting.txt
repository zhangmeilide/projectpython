    # Docker Compose 配置文件，用于部署 FastAPI 应用
    # 此文件定义了 Docker 服务的配置，包括使用的镜像、端口映射、挂载卷等信息

    # 指定 Docker Compose 文件的版本，这里使用 3.8 版本
    docker-compose.yml 
    version: '3.8'

# 定义 Docker 服务的部分
    services:
    # 定义一个名为 fastapi 的服务
    fastapi:
        # 指定该服务使用的 Docker 镜像，这里使用名为 my-fastapi-app 的镜像
        image: my-fastapi-app
        # 为该服务的容器指定一个名称，方便后续管理和识别
        container_name: fastapi_app
        # 定义端口映射，将容器内部的 8083 端口映射到宿主机的 8083 端口
        # 外部可以通过宿主机的 8083 端口访问容器内的 FastAPI 应用
        # 外部接口访问地址：http://10.180.138.37:8083
        ports:
        - "8083:8083"
        # 定义容器启动时要执行的命令
        # 这里使用 uvicorn 启动 FastAPI 应用，指定主应用文件为 main.py，应用实例为 app
        # 监听所有可用的网络接口，端口为 8083
        command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8083"]
        # 定义数据卷挂载，将宿主机当前目录下的 app 文件夹挂载到容器内的 /app 目录
        # 这样可以实现宿主机和容器之间的文件共享
        volumes:
        - ./app:/app
        # 定义容器的重启策略，设置为 always 表示容器无论因为什么原因停止都会自动重启
        restart: always

-------------------------------------------------------------------------------------------

下面是完整的文字： 

    version: '3.8'                                                                                                                                                                                                     
    services:
    fastapi:
        image: my-fastapi-app
        container_name: fastapi_app
        ports:
        - "8083:8083"
        command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8083"]
        volumes:
        - ./app:/app
        restart: always



---------------------------------------------------------------------------------------------------------------

 离线构建部署 Docker 镜像流程 ，自动化脚本：package-and-transfer.sh

 #!/bin/bash

set -e

# ======= 配置区域（根据你的实际情况修改）=======
    APP_NAME="my-fastapi-app"
    IMAGE_TAG="latest"
    IMAGE_FILE="${APP_NAME}.tar"
    CODE_DIR="/home/user/my-fastapi-app"  # 项目路径
    CODE_ARCHIVE="${APP_NAME}.tar.gz"
    REMOTE_HOST="root@10.180.138.37"
    REMOTE_DIR="/root"
    # ===============================================

    echo "🚀 [1/5] 构建 Docker 镜像..."
    cd "$CODE_DIR"
    docker build -t $APP_NAME:$IMAGE_TAG .

    echo "📦 [2/5] 导出 Docker 镜像为 $IMAGE_FILE..."
    docker save $APP_NAME:$IMAGE_TAG -o "$IMAGE_FILE"

    echo "🗃 [3/5] 打包项目目录为 $CODE_ARCHIVE..."
    cd "$(dirname "$CODE_DIR")"
    tar czf "$CODE_ARCHIVE" "$(basename "$CODE_DIR")"

    echo "📡 [4/5] 传输文件到远程服务器: $REMOTE_HOST"
    scp "$IMAGE_FILE" "$CODE_ARCHIVE" "$REMOTE_HOST:$REMOTE_DIR"

    echo "✅ [5/5] 完成！你可以在目标服务器执行以下操作："
    echo "--------------------------------------------"
    echo "cd $REMOTE_DIR"
    echo "docker load -i $IMAGE_FILE"
    echo "tar xzf $CODE_ARCHIVE"
    echo "cd $(basename "$CODE_DIR")"
    echo "docker run -d --name $APP_NAME -p 8000:8000 $APP_NAME:$IMAGE_TAG"
    echo "--------------------------------------------"

-------------------------------------------------------------------------------
流程：

步骤 | 操作位置 | 说明
构建镜像 | 开发机 | docker build
导出镜像 | 开发机 | docker save
传输镜像 | U盘 / scp | scp / copy
加载镜像 | 服务器 | docker load
启动服务 | 服务器 | docker run


-------------------------------------------------------------------------------
具体流程：

一、准备工作
    1.1 构建环境要求（开发机）
        能访问互联网
        已安装 Docker
        存放 FastAPI 项目的目录（比如 /home/user/my-fastapi-app）
    1.2 目标环境要求（目标服务器）
        已安装 Docker
        可通过物理方式（U盘、scp）接收文件
        无法联网或受限联网

二、在开发机上构建镜像并导出
    2.1 编写 Dockerfile（位于项目根目录）
        # Dockerfile

        FROM bitnami/python:3.10.16-debian-12-r0
        WORKDIR /app
        COPY requirements.txt ./
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .
        EXPOSE 8000
        CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
        注意：如果你的项目中有 .dockerignore，确认它排除无关文件。

    2.2 构建镜像
        cd /home/user/my-fastapi-app
        docker build -t my-fastapi-app:latest .

    2.3 导出镜像为 .tar 文件
        docker save my-fastapi-app:latest -o /home/user/fastapi.tar

三、将镜像和项目传输到目标服务器
    你可以使用以下方式之一：
    方式 1：使用 scp
        scp /home/user/fastapi.tar root@<目标服务器IP>:/root/
    方式 2：U 盘 / 网络共享
        将 fastapi.tar 拷贝至目标服务器，如 /root/

四、在目标服务器上加载镜像并运行容器
    4.1 加载镜像
    docker load -i /root/fastapi.tar
    4.2 运行容器
    docker run -d --name fastapi-app -p 8000:8000 my-fastapi-app:latest

    如果你的服务需要绑定到特定 IP 或挂载数据卷，请按需加参数。
